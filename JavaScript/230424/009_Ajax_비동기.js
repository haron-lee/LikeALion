//* Ajax 통신 비동기
// Ajax와 기존의 동기식 코드를 함께 작성하면 코드의 실행순서에 문제가 발생한다. 자바스크립트 엔진은 비동기 코드가 끝날때까지 다른 코드의 실행을 멈추지 않기 때문이다.
//? Ajax 통신이 비동기인 이유는?
// 동기적일 경우에는 데이터 다운이 끝날 때까지 로딩을 기다리고 바로 화면에 나타나지 않는다.
// 사용자의 사용성을 위해서 비동기를 사용한다.

const result = 비동기통신함수();
통신함수의결과를가공하는함수1(result);

const result2 = 비동기통신함수2();
통신함수의결과를가공하는함수2(result2);
const total = result + result2;

// 위의 코드의 result, result2값은 undefined가 된다. 아직 비동기통신함수가 준비되지 않았기 때문이다.

//그래서 통신이 끝난 다음에야 다음 함수가 실행되도록 콜백함수로 코드를 작성해야한다.
// 결국 일반적인 동기식 코드처럼 비동기 함수 실행 후 다음 라인에서 다른 함수를 실행하는, 순차적으로 함수들을 나열하는 방식이 불가능하다. 비동기 코드가 끝나고 콜백으로 함수를 부르고, 다음 함수를 또 콜백으로 부르는 형태가 되야한다.

const total = 비동기통신함수(
  input,
  통신함수의결과를가공하는함수1(
    result,
    비동기통신함수2(통신함수의결과를가공하는함수2(result, result2))
  )
);

// 이렇게 비동기 함수가 끝나기 전에 중간 중간에 필요한 콜백함수를 실행시키며 사용할 수 밖에 없었다.
